/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import sk.stu.fiit.gui.dialogs.CustomerAdder;
import java.awt.CardLayout;
import java.awt.Frame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.entity.Bill;
import sk.stu.fiit.entity.Customer;
import sk.stu.fiit.entity.Product;
import sk.stu.fiit.gui.dialogs.BillAdder;
import sk.stu.fiit.gui.dialogs.BillViewer;
import sk.stu.fiit.gui.dialogs.ProductAdder;
import sk.stu.fiit.gui.utils.TableUtil;
import static sk.stu.fiit.gui.utils.TableUtil.assertSingleRowSelected;
import static sk.stu.fiit.gui.utils.TableUtil.deleteRows;

/**
 *
 * @author ixenr
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {

        File f = new File("data.bin");
        if (f.exists() && !f.isDirectory()) {
            try {
                loadData();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            this.products = new ArrayList<>();
            this.customers = new ArrayList<>();
            this.bills = new ArrayList<>();
        }

        initComponents();
        
        loadTables();
        
        Frame frame = (Frame) this;

        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                try {
                    saveData();
                } catch (NotSerializableException e) {
                    e.printStackTrace();
                    File f = new File("data.bin");
                    f.delete();
                }
                System.exit(0);
            }
        });
    }

    private void saveData() throws NotSerializableException {
        List<Object> serList = new ArrayList<Object>();
        serList.add(customers);
        serList.add(products);
        serList.add(bills);

        try (FileOutputStream fos = new FileOutputStream("data.bin"); ObjectOutputStream oos = new ObjectOutputStream(fos)) {
            try {
                oos.writeObject(serList);
            } catch (NotSerializableException e) {
                throw e;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadData() throws IOException, ClassNotFoundException {
        List<Object> serList;

        try (FileInputStream fis = new FileInputStream("data.bin"); ObjectInputStream ois = new ObjectInputStream(fis)) {
            serList = (ArrayList<Object>) ois.readObject();
        } catch (ClassNotFoundException | IOException e) {
            throw e;
        }

        customers = (ArrayList<Customer>) serList.get(0);
        products = (ArrayList<Product>) serList.get(1);
        bills = (ArrayList<Bill>) serList.get(2);
    }
    
    private void loadTables() {
        
        DefaultTableModel modelCustomers = (DefaultTableModel) customerTable.getModel();
        DefaultTableModel modelProducts = (DefaultTableModel) productTable.getModel();
        DefaultTableModel modelBills = (DefaultTableModel) billTable.getModel();
            
        customers.forEach(c -> {
            modelCustomers.addRow(new Object[]{c, c.getName(), c.getAddress(), c.getCity(), c.getZipcode()});
        });
        
        products.forEach(p -> {
            modelProducts.addRow(new Object[]{p, p.getName(), p.getDesc(), p.getPrice()});
        });
        
        bills.forEach(b -> {
            modelBills.addRow(new Object[]{b, b.getCustomer().getName(), b.getDate().toString()});
        });
    }

    private List<Bill> bills;
    private List<Customer> customers;
    private List<Product> products;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        customerPanelButton = new javax.swing.JButton();
        productPanelButton = new javax.swing.JButton();
        billPanelButton = new javax.swing.JButton();
        superfakturaLabel = new javax.swing.JLabel();
        customerPanel = new javax.swing.JPanel();
        addCustomerButton = new javax.swing.JButton();
        editCustomerButton = new javax.swing.JButton();
        deleteCustomerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        menuReturnButton = new javax.swing.JButton();
        productPanel = new javax.swing.JPanel();
        addProductButton = new javax.swing.JButton();
        editProductButton = new javax.swing.JButton();
        deleteProductButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        menuReturnButton1 = new javax.swing.JButton();
        billPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        backButtonBill = new javax.swing.JButton();
        billAddButton = new javax.swing.JButton();
        billViewButton = new javax.swing.JButton();
        billDeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SuperFaktura V2");
        setResizable(false);
        setSize(new java.awt.Dimension(860, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        containerPanel.setLayout(new java.awt.CardLayout());

        menuPanel.setMinimumSize(new java.awt.Dimension(860, 600));
        menuPanel.setOpaque(false);
        menuPanel.setPreferredSize(new java.awt.Dimension(860, 600));

        customerPanelButton.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        customerPanelButton.setText("Customer List");
        customerPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerPanelButtonActionPerformed(evt);
            }
        });

        productPanelButton.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        productPanelButton.setText("Product List");
        productPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPanelButtonActionPerformed(evt);
            }
        });

        billPanelButton.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        billPanelButton.setText("Bill List");
        billPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billPanelButtonActionPerformed(evt);
            }
        });

        superfakturaLabel.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        superfakturaLabel.setForeground(new java.awt.Color(0, 204, 0));
        superfakturaLabel.setText("SuperFaktura V2");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(customerPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(billPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(superfakturaLabel))
                .addContainerGap(263, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(superfakturaLabel)
                .addGap(56, 56, 56)
                .addComponent(customerPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        containerPanel.add(menuPanel, "menuPanel");
        menuPanel.getAccessibleContext().setAccessibleDescription("");

        addCustomerButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        addCustomerButton.setText("Add Customer");
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        editCustomerButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        editCustomerButton.setText("Edit Customer");
        editCustomerButton.setEnabled(false);
        editCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCustomerButtonActionPerformed(evt);
            }
        });

        deleteCustomerButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        deleteCustomerButton.setText("Delete Customers");
        deleteCustomerButton.setEnabled(false);
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "customerObject", "Name", "Address", "City", "Zipcode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(customerTable);
        customerTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (customerTable.getColumnModel().getColumnCount() > 0) {
            customerTable.getColumnModel().getColumn(0).setResizable(false);
            customerTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        }
        customerTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                editCustomerButton.setEnabled(true);
                deleteCustomerButton.setEnabled(true);
            }
        });

        customerTable.removeColumn(customerTable.getColumnModel().getColumn(0));

        menuReturnButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        menuReturnButton.setText("Back");
        menuReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReturnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addComponent(addCustomerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editCustomerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteCustomerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 336, Short.MAX_VALUE)
                        .addComponent(menuReturnButton)))
                .addContainerGap())
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerButton)
                    .addComponent(editCustomerButton)
                    .addComponent(deleteCustomerButton)
                    .addComponent(menuReturnButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );

        containerPanel.add(customerPanel, "customerPanel");

        addProductButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        addProductButton.setText("Add Product");
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });

        editProductButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        editProductButton.setText("Edit Product");
        editProductButton.setEnabled(false);
        editProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProductButtonActionPerformed(evt);
            }
        });

        deleteProductButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        deleteProductButton.setText("Delete Products");
        deleteProductButton.setEnabled(false);
        deleteProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductButtonActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "productObject", "Name", "Description", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(productTable);
        productTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        }
        productTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                editProductButton.setEnabled(true);
                deleteProductButton.setEnabled(true);
            }
        });

        productTable.removeColumn(productTable.getColumnModel().getColumn(0));

        menuReturnButton1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        menuReturnButton1.setText("Back");
        menuReturnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReturnButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productPanelLayout = new javax.swing.GroupLayout(productPanel);
        productPanel.setLayout(productPanelLayout);
        productPanelLayout.setHorizontalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(productPanelLayout.createSequentialGroup()
                        .addComponent(addProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 378, Short.MAX_VALUE)
                        .addComponent(menuReturnButton1)))
                .addContainerGap())
        );
        productPanelLayout.setVerticalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProductButton)
                    .addComponent(editProductButton)
                    .addComponent(deleteProductButton)
                    .addComponent(menuReturnButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        containerPanel.add(productPanel, "productPanel");

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "billObject", "Customer Name", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(billTable);
        billTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        billTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                billViewButton.setEnabled(true);
                billDeleteButton.setEnabled(true);
            }
        });

        billTable.removeColumn(billTable.getColumnModel().getColumn(0));

        backButtonBill.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        backButtonBill.setText("Back");
        backButtonBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonBillActionPerformed(evt);
            }
        });

        billAddButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        billAddButton.setText("Add Bill");
        billAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billAddButtonActionPerformed(evt);
            }
        });

        billViewButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        billViewButton.setText("View Bill");
        billViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billViewButtonActionPerformed(evt);
            }
        });

        billDeleteButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        billDeleteButton.setText("Delete Bill");
        billDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout billPanelLayout = new javax.swing.GroupLayout(billPanel);
        billPanel.setLayout(billPanelLayout);
        billPanelLayout.setHorizontalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPanelLayout.createSequentialGroup()
                        .addComponent(billAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billViewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billDeleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backButtonBill)))
                .addContainerGap())
        );
        billPanelLayout.setVerticalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billAddButton)
                    .addComponent(billViewButton)
                    .addComponent(billDeleteButton)
                    .addComponent(backButtonBill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        containerPanel.add(billPanel, "billPanel");

        getContentPane().add(containerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        Customer tempCustomer = new Customer();

        JDialog addCustomer = new CustomerAdder(this, tempCustomer, false);
        addCustomer.setVisible(true);

        if (tempCustomer.getInit()) {
            DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
            model.addRow(new Object[]{tempCustomer, tempCustomer.getName(), tempCustomer.getAddress(), tempCustomer.getCity(), tempCustomer.getZipcode()});
        }

    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void customerPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerPanelButtonActionPerformed
        customerTable.clearSelection();
        editCustomerButton.setEnabled(false);
        deleteCustomerButton.setEnabled(false);

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "customerPanel");
    }//GEN-LAST:event_customerPanelButtonActionPerformed

    private void productPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPanelButtonActionPerformed
        productTable.clearSelection();
        deleteProductButton.setEnabled(false);
        editProductButton.setEnabled(false);

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "productPanel");
    }//GEN-LAST:event_productPanelButtonActionPerformed

    private void billPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billPanelButtonActionPerformed
        billTable.clearSelection();
        billDeleteButton.setEnabled(false);
        billViewButton.setEnabled(false);

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "billPanel");
    }//GEN-LAST:event_billPanelButtonActionPerformed

    private void menuReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReturnButtonActionPerformed

        customers.clear();
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            customers.add((Customer) model.getValueAt(i, 0));
        }

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "menuPanel");
    }//GEN-LAST:event_menuReturnButtonActionPerformed

    private void editCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCustomerButtonActionPerformed
        if (!assertSingleRowSelected(customerTable)) {
            JOptionPane.showMessageDialog(this, "Exactly one row must be selected", "Invalid selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        int row_idx = customerTable.getSelectedRow();

        Customer tempCustomer = (Customer) model.getValueAt(row_idx, 0);

        JDialog addCustomer = new CustomerAdder(this, tempCustomer, true);
        addCustomer.setVisible(true);

        model.setValueAt(tempCustomer.getName(), row_idx, 1);
        model.setValueAt(tempCustomer.getAddress(), row_idx, 2);
        model.setValueAt(tempCustomer.getCity(), row_idx, 3);
        model.setValueAt(tempCustomer.getZipcode(), row_idx, 4);

    }//GEN-LAST:event_editCustomerButtonActionPerformed

    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed
        deleteRows(customerTable);
        editCustomerButton.setEnabled(false);
        deleteCustomerButton.setEnabled(false);
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        Product tempProduct = new Product();

        JDialog addProductJDialog = new ProductAdder(this, tempProduct, false);
        addProductJDialog.setVisible(true);

        if (tempProduct.isInitialized()) {
            DefaultTableModel model = (DefaultTableModel) productTable.getModel();
            model.addRow(new Object[]{tempProduct, tempProduct.getName(), tempProduct.getDesc(), tempProduct.getPrice()});
        }
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void editProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProductButtonActionPerformed
        if (!assertSingleRowSelected(productTable)) {
            JOptionPane.showMessageDialog(this, "Exactly one row must be selected", "Invalid selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        int row_idx = productTable.getSelectedRow();

        Product tempProduct = (Product) model.getValueAt(row_idx, 0);

        JDialog addCustomer = new ProductAdder(this, tempProduct, true);
        addCustomer.setVisible(true);

        model.setValueAt(tempProduct.getName(), row_idx, 1);
        model.setValueAt(tempProduct.getDesc(), row_idx, 2);
        model.setValueAt(tempProduct.getPrice(), row_idx, 3);

    }//GEN-LAST:event_editProductButtonActionPerformed

    private void deleteProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductButtonActionPerformed
        deleteRows(productTable);
        editProductButton.setEnabled(false);
        deleteProductButton.setEnabled(false);
    }//GEN-LAST:event_deleteProductButtonActionPerformed

    private void menuReturnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReturnButton1ActionPerformed
        products.clear();
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            products.add((Product) model.getValueAt(i, 0));
        }

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "menuPanel");
    }//GEN-LAST:event_menuReturnButton1ActionPerformed

    private void backButtonBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonBillActionPerformed
        bills.clear();
        DefaultTableModel model = (DefaultTableModel) billTable.getModel();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            bills.add((Bill) model.getValueAt(i, 0));
        }

        CardLayout card = (CardLayout) containerPanel.getLayout();
        card.show(containerPanel, "menuPanel");
    }//GEN-LAST:event_backButtonBillActionPerformed

    private void billDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billDeleteButtonActionPerformed
        deleteRows(billTable);
        billDeleteButton.setEnabled(false);
        billViewButton.setEnabled(false);
    }//GEN-LAST:event_billDeleteButtonActionPerformed

    private void billViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billViewButtonActionPerformed
        if (!assertSingleRowSelected(billTable)) {
            JOptionPane.showMessageDialog(this, "Exactly one row must be selected", "Invalid selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Bill tempBill = (Bill) TableUtil.getObjectFromTableSelection(billTable, 0);

        JDialog viewBillJDialog = new BillViewer(this, tempBill);
        viewBillJDialog.setVisible(true);


    }//GEN-LAST:event_billViewButtonActionPerformed

    private void billAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billAddButtonActionPerformed
        Bill tempBill = new Bill();

        JDialog addBillJDialog = new BillAdder(this, tempBill, customers, products);
        addBillJDialog.setVisible(true);

        if (tempBill.isInitialized()) {
            DefaultTableModel model = (DefaultTableModel) billTable.getModel();
            model.addRow(new Object[]{tempBill, tempBill.getCustomer().getName(), tempBill.getDate().toString()});
        }
    }//GEN-LAST:event_billAddButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Menu().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerButton;
    private javax.swing.JButton addProductButton;
    private javax.swing.JButton backButtonBill;
    private javax.swing.JButton billAddButton;
    private javax.swing.JButton billDeleteButton;
    private javax.swing.JPanel billPanel;
    private javax.swing.JButton billPanelButton;
    private javax.swing.JTable billTable;
    private javax.swing.JButton billViewButton;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JButton customerPanelButton;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JButton deleteProductButton;
    private javax.swing.JButton editCustomerButton;
    private javax.swing.JButton editProductButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton menuReturnButton;
    private javax.swing.JButton menuReturnButton1;
    private javax.swing.JPanel productPanel;
    private javax.swing.JButton productPanelButton;
    private javax.swing.JTable productTable;
    private javax.swing.JLabel superfakturaLabel;
    // End of variables declaration//GEN-END:variables

}
